Setting up analysis scope... (from file /home/joana_execution/joana.contrib.lib/stubs/jSDG-stubs-jre1.5.jar) done.
Creating class hierarchy... (18317 classes) done.
Setting up entrypoints... Setting up entrypoint main.Main.main([[[LString;)V... done.
Building system dependence graph... 
	callgraph: 84 nodes and 97 edges
	intraproc: calls.mergeable..clinit.statics.heap(if,adj,df,reg).misc.killdef.convert.summary..
done.
Time needed: 1316790ms - Memory: 1040M used.
SDG INFO
java.lang.StringBuilder
    Attributes: 0
    Methods: 4
        java.lang.StringBuilder java.lang.StringBuilder.append(java.lang.String) - Instructions: 2
            LINE 120: (java.lang.StringBuilder java.lang.StringBuilder.append(java.lang.String):2) v5 = this.append(p1)
            LINE 121: (java.lang.StringBuilder java.lang.StringBuilder.append(java.lang.String):7) return this
        java.lang.String java.lang.StringBuilder.toString() - Instructions: 5
            LINE 431: (java.lang.String java.lang.StringBuilder.toString():16) return v3
            LINE 431: (java.lang.String java.lang.StringBuilder.toString():0) v3 = new java.lang.String
            LINE 431: (java.lang.String java.lang.StringBuilder.toString():5) v4 = this.value
            LINE 431: (java.lang.String java.lang.StringBuilder.toString():10) v6 = this.count
            LINE 431: (java.lang.String java.lang.StringBuilder.toString():13) v3.<init>(v4, #(0), v6)
        void java.lang.StringBuilder.<init>() - Instructions: 2
            LINE 69: (void java.lang.StringBuilder.<init>():3) this.<init>(#(16))
            LINE 70: (void java.lang.StringBuilder.<init>():6) return
        void java.lang.StringBuilder.<init>(java.lang.String) - Instructions: 5
            LINE 93: (void java.lang.StringBuilder.<init>(java.lang.String):2) v5 = p1.length()
            LINE 93: (void java.lang.StringBuilder.<init>(java.lang.String):7) v7 = v5 + #(16)
            LINE 93: (void java.lang.StringBuilder.<init>(java.lang.String):8) this.<init>(v7)
            LINE 94: (void java.lang.StringBuilder.<init>(java.lang.String):13) v10 = this.append(p1)
            LINE 95: (void java.lang.StringBuilder.<init>(java.lang.String):17) return
java.util.HashMap
    Attributes: 7
        java.util.HashMap$Entry[] table
        float loadFactor
        int size
        int modCount
        int threshold
        java.util.Set entrySet
        java.lang.Object NULL_KEY
    Methods: 6
        void java.util.HashMap.<init>(int) - Instructions: 2
            LINE 193: (void java.util.HashMap.<init>(int):4) this.<init>(p1, #(0.75 f))
            LINE 194: (void java.util.HashMap.<init>(int):7) return
        void java.util.HashMap.<init>(int, float) - Instructions: 34
            LINE 164: (void java.util.HashMap.<init>(int, float):1) this.<init>()
            LINE 901: (void java.util.HashMap.<init>(int, float):6) this.entrySet = #(null)
            LINE 165: (void java.util.HashMap.<init>(int, float):10) if (p1 >= #(0)) goto 40
            LINE 166: (void java.util.HashMap.<init>(int, float):13) v31 = new java.lang.IllegalArgumentException
            LINE 166: (void java.util.HashMap.<init>(int, float):17) v32 = new java.lang.StringBuilder
            LINE 166: (void java.util.HashMap.<init>(int, float):23) v32.<init>(#(Illegal initial capac...))
            LINE 167: (void java.util.HashMap.<init>(int, float):27) v36 = v32.append(p1)
            LINE 167: (void java.util.HashMap.<init>(int, float):30) v38 = v36.toString()
            LINE 166: (void java.util.HashMap.<init>(int, float):33) v31.<init>(v38)
            LINE 166: (void java.util.HashMap.<init>(int, float):36) throw v31
            LINE 168: (void java.util.HashMap.<init>(int, float):40) if (p1 <= #(1073741824)) goto 48
            LINE 170: (void java.util.HashMap.<init>(int, float):48) v11 = p2 > #(0.0 f)
            LINE 170: (void java.util.HashMap.<init>(int, float):49) if (v11 <= #(0)) goto 53
            LINE 170: (void java.util.HashMap.<init>(int, float):53) v13 = isNaN(p2)
            LINE 170: (void java.util.HashMap.<init>(int, float):56) if (v13 == #(0)) goto 85
            LINE 171: (void java.util.HashMap.<init>(int, float):59) v22 = new java.lang.IllegalArgumentException
            LINE 171: (void java.util.HashMap.<init>(int, float):63) v23 = new java.lang.StringBuilder
            LINE 171: (void java.util.HashMap.<init>(int, float):69) v23.<init>(#(Illegal load factor: ))
            LINE 172: (void java.util.HashMap.<init>(int, float):73) v27 = v23.append(p2)
            LINE 172: (void java.util.HashMap.<init>(int, float):76) v29 = v27.toString()
            LINE 171: (void java.util.HashMap.<init>(int, float):79) v22.<init>(v29)
            LINE 171: (void java.util.HashMap.<init>(int, float):82) throw v22
            LINE 176: (void java.util.HashMap.<init>(int, float):85) goto 94
            LINE 177: (void java.util.HashMap.<init>(int, float):90) v15 = v16 ? #(1)
            LINE 176: (void java.util.HashMap.<init>(int, float):94) if (v16 < v9) goto 90
            LINE 179: (void java.util.HashMap.<init>(int, float):99) this.loadFactor = p2
            LINE 180: (void java.util.HashMap.<init>(int, float):104) v17 = CONVERT I to F v16
            LINE 180: (void java.util.HashMap.<init>(int, float):106) v18 = v17 * p2
            LINE 180: (void java.util.HashMap.<init>(int, float):107) v19 = CONVERT F to I v18
            LINE 180: (void java.util.HashMap.<init>(int, float):108) this.threshold = v19
            LINE 181: (void java.util.HashMap.<init>(int, float):113) v20 = new java.util.HashMap$Entry[]
            LINE 181: (void java.util.HashMap.<init>(int, float):116) this.table = v20
            LINE 182: (void java.util.HashMap.<init>(int, float):120) this.init()
            LINE 183: (void java.util.HashMap.<init>(int, float):123) return
        void java.util.HashMap.addEntry(int, java.lang.Object, java.lang.Object, int) - Instructions: 16
            LINE 796: (void java.util.HashMap.addEntry(int, java.lang.Object, java.lang.Object, int):1) v7 = this.table
            LINE 796: (void java.util.HashMap.addEntry(int, java.lang.Object, java.lang.Object, int):6) v8 = v7[p4]
            LINE 797: (void java.util.HashMap.addEntry(int, java.lang.Object, java.lang.Object, int):10) v9 = this.table
            LINE 797: (void java.util.HashMap.addEntry(int, java.lang.Object, java.lang.Object, int):15) v10 = new java.util.HashMap$Entry
            LINE 797: (void java.util.HashMap.addEntry(int, java.lang.Object, java.lang.Object, int):24) v10.<init>(p1, p2, p3, v8)
            LINE 797: (void java.util.HashMap.addEntry(int, java.lang.Object, java.lang.Object, int):27) v9[p4] = v10
            LINE 798: (void java.util.HashMap.addEntry(int, java.lang.Object, java.lang.Object, int):30) v12 = this.size
            LINE 798: (void java.util.HashMap.addEntry(int, java.lang.Object, java.lang.Object, int):35) v14 = v12 + #(1)
            LINE 798: (void java.util.HashMap.addEntry(int, java.lang.Object, java.lang.Object, int):36) this.size = v14
            LINE 798: (void java.util.HashMap.addEntry(int, java.lang.Object, java.lang.Object, int):40) v15 = this.threshold
            LINE 798: (void java.util.HashMap.addEntry(int, java.lang.Object, java.lang.Object, int):43) if (v12 < v15) goto 57
            LINE 799: (void java.util.HashMap.addEntry(int, java.lang.Object, java.lang.Object, int):49) v17 = this.table
            LINE 799: (void java.util.HashMap.addEntry(int, java.lang.Object, java.lang.Object, int):52) v18 = v17.length
            LINE 799: (void java.util.HashMap.addEntry(int, java.lang.Object, java.lang.Object, int):53) v19 = #(2) * v18
            LINE 799: (void java.util.HashMap.addEntry(int, java.lang.Object, java.lang.Object, int):54) this.resize(v19)
            LINE 800: (void java.util.HashMap.addEntry(int, java.lang.Object, java.lang.Object, int):57) return
        java.lang.Object java.util.HashMap.putForNullKey(java.lang.Object) - Instructions: 24
            LINE 436: (java.lang.Object java.util.HashMap.putForNullKey(java.lang.Object):0) v4 = java.util.HashMap.NULL_KEY
            LINE 436: (java.lang.Object java.util.HashMap.putForNullKey(java.lang.Object):3) v6 = v4.hashCode()
            LINE 436: (java.lang.Object java.util.HashMap.putForNullKey(java.lang.Object):6) v8 = hash(v6)
            LINE 437: (java.lang.Object java.util.HashMap.putForNullKey(java.lang.Object):12) v9 = this.table
            LINE 437: (java.lang.Object java.util.HashMap.putForNullKey(java.lang.Object):15) v10 = v9.length
            LINE 437: (java.lang.Object java.util.HashMap.putForNullKey(java.lang.Object):16) v12 = indexFor(v8, v10)
            LINE 439: (java.lang.Object java.util.HashMap.putForNullKey(java.lang.Object):21) v13 = this.table
            LINE 439: (java.lang.Object java.util.HashMap.putForNullKey(java.lang.Object):25) v14 = v13[v12]
            LINE 439: (java.lang.Object java.util.HashMap.putForNullKey(java.lang.Object):28) goto 73
            LINE 440: (java.lang.Object java.util.HashMap.putForNullKey(java.lang.Object):33) v16 = v19.key
            LINE 440: (java.lang.Object java.util.HashMap.putForNullKey(java.lang.Object):36) v17 = java.util.HashMap.NULL_KEY
            LINE 440: (java.lang.Object java.util.HashMap.putForNullKey(java.lang.Object):39) if (v16 != v17) goto 66
            LINE 441: (java.lang.Object java.util.HashMap.putForNullKey(java.lang.Object):44) v25 = v19.value
            LINE 442: (java.lang.Object java.util.HashMap.putForNullKey(java.lang.Object):52) v19.value = p1
            LINE 443: (java.lang.Object java.util.HashMap.putForNullKey(java.lang.Object):58) v19.recordAccess(this)
            LINE 444: (java.lang.Object java.util.HashMap.putForNullKey(java.lang.Object):63) return v25
            LINE 439: (java.lang.Object java.util.HashMap.putForNullKey(java.lang.Object):66) v18 = v19.next
            LINE 439: (java.lang.Object java.util.HashMap.putForNullKey(java.lang.Object):73) if (v19 != #(null)) goto 33
            LINE 448: (java.lang.Object java.util.HashMap.putForNullKey(java.lang.Object):78) v20 = this.modCount
            LINE 448: (java.lang.Object java.util.HashMap.putForNullKey(java.lang.Object):82) v22 = v20 + #(1)
            LINE 448: (java.lang.Object java.util.HashMap.putForNullKey(java.lang.Object):83) this.modCount = v22
            LINE 449: (java.lang.Object java.util.HashMap.putForNullKey(java.lang.Object):88) v23 = java.util.HashMap.NULL_KEY
            LINE 449: (java.lang.Object java.util.HashMap.putForNullKey(java.lang.Object):93) this.addEntry(v8, v23, p1, v12)
            LINE 450: (java.lang.Object java.util.HashMap.putForNullKey(java.lang.Object):97) return #(null)
        boolean java.util.HashMap.containsKey(java.lang.Object) - Instructions: 18
            LINE 376: (boolean java.util.HashMap.containsKey(java.lang.Object):1) v5 = maskNull(p1)
            LINE 377: (boolean java.util.HashMap.containsKey(java.lang.Object):6) v7 = v5.hashCode()
            LINE 377: (boolean java.util.HashMap.containsKey(java.lang.Object):9) v9 = hash(v7)
            LINE 378: (boolean java.util.HashMap.containsKey(java.lang.Object):15) v10 = this.table
            LINE 378: (boolean java.util.HashMap.containsKey(java.lang.Object):18) v11 = v10.length
            LINE 378: (boolean java.util.HashMap.containsKey(java.lang.Object):19) v13 = indexFor(v9, v11)
            LINE 379: (boolean java.util.HashMap.containsKey(java.lang.Object):25) v14 = this.table
            LINE 379: (boolean java.util.HashMap.containsKey(java.lang.Object):30) v15 = v14[v13]
            LINE 380: (boolean java.util.HashMap.containsKey(java.lang.Object):33) goto 68
            LINE 381: (boolean java.util.HashMap.containsKey(java.lang.Object):38) v17 = v23.hash
            LINE 381: (boolean java.util.HashMap.containsKey(java.lang.Object):42) if (v17 != v9) goto 61
            LINE 381: (boolean java.util.HashMap.containsKey(java.lang.Object):48) v18 = v23.key
            LINE 381: (boolean java.util.HashMap.containsKey(java.lang.Object):51) v20 = eq(v5, v18)
            LINE 381: (boolean java.util.HashMap.containsKey(java.lang.Object):54) if (v20 == #(0)) goto 61
            LINE 382: (boolean java.util.HashMap.containsKey(java.lang.Object):58) return #(1)
            LINE 383: (boolean java.util.HashMap.containsKey(java.lang.Object):61) v22 = v23.next
            LINE 380: (boolean java.util.HashMap.containsKey(java.lang.Object):68) if (v23 != #(null)) goto 38
            LINE 385: (boolean java.util.HashMap.containsKey(java.lang.Object):72) return #(0)
        java.lang.Object java.util.HashMap.put(java.lang.Object, java.lang.Object) - Instructions: 28
            LINE 416: (java.lang.Object java.util.HashMap.put(java.lang.Object, java.lang.Object):1) if (p1 != #(null)) goto 11
            LINE 417: (java.lang.Object java.util.HashMap.put(java.lang.Object, java.lang.Object):6) v30 = this.putForNullKey(p2)
            LINE 417: (java.lang.Object java.util.HashMap.put(java.lang.Object, java.lang.Object):9) return v30
            LINE 418: (java.lang.Object java.util.HashMap.put(java.lang.Object, java.lang.Object):11) v7 = p1.hashCode()
            LINE 418: (java.lang.Object java.util.HashMap.put(java.lang.Object, java.lang.Object):14) v9 = hash(v7)
            LINE 419: (java.lang.Object java.util.HashMap.put(java.lang.Object, java.lang.Object):20) v10 = this.table
            LINE 419: (java.lang.Object java.util.HashMap.put(java.lang.Object, java.lang.Object):23) v11 = v10.length
            LINE 419: (java.lang.Object java.util.HashMap.put(java.lang.Object, java.lang.Object):24) v13 = indexFor(v9, v11)
            LINE 420: (java.lang.Object java.util.HashMap.put(java.lang.Object, java.lang.Object):30) v14 = this.table
            LINE 420: (java.lang.Object java.util.HashMap.put(java.lang.Object, java.lang.Object):35) v15 = v14[v13]
            LINE 420: (java.lang.Object java.util.HashMap.put(java.lang.Object, java.lang.Object):38) goto 102
            LINE 422: (java.lang.Object java.util.HashMap.put(java.lang.Object, java.lang.Object):43) v16 = v22.hash
            LINE 422: (java.lang.Object java.util.HashMap.put(java.lang.Object, java.lang.Object):47) if (v16 != v9) goto 95
            LINE 422: (java.lang.Object java.util.HashMap.put(java.lang.Object, java.lang.Object):52) v17 = v22.key
            LINE 422: (java.lang.Object java.util.HashMap.put(java.lang.Object, java.lang.Object):59) if (v17 == p1) goto 73
            LINE 422: (java.lang.Object java.util.HashMap.put(java.lang.Object, java.lang.Object):65) v19 = p1.equals(v17)
            LINE 422: (java.lang.Object java.util.HashMap.put(java.lang.Object, java.lang.Object):68) if (v19 == #(0)) goto 95
            LINE 423: (java.lang.Object java.util.HashMap.put(java.lang.Object, java.lang.Object):73) v27 = v22.value
            LINE 424: (java.lang.Object java.util.HashMap.put(java.lang.Object, java.lang.Object):81) v22.value = p2
            LINE 425: (java.lang.Object java.util.HashMap.put(java.lang.Object, java.lang.Object):87) v22.recordAccess(this)
            LINE 426: (java.lang.Object java.util.HashMap.put(java.lang.Object, java.lang.Object):92) return v27
            LINE 420: (java.lang.Object java.util.HashMap.put(java.lang.Object, java.lang.Object):95) v21 = v22.next
            LINE 420: (java.lang.Object java.util.HashMap.put(java.lang.Object, java.lang.Object):102) if (v22 != #(null)) goto 43
            LINE 430: (java.lang.Object java.util.HashMap.put(java.lang.Object, java.lang.Object):107) v23 = this.modCount
            LINE 430: (java.lang.Object java.util.HashMap.put(java.lang.Object, java.lang.Object):111) v25 = v23 + #(1)
            LINE 430: (java.lang.Object java.util.HashMap.put(java.lang.Object, java.lang.Object):112) this.modCount = v25
            LINE 431: (java.lang.Object java.util.HashMap.put(java.lang.Object, java.lang.Object):121) this.addEntry(v9, p1, p2, v13)
            LINE 432: (java.lang.Object java.util.HashMap.put(java.lang.Object, java.lang.Object):125) return #(null)
java.lang.String[]
    Attributes: 0
    Methods: 0
java.util.HashSet
    Attributes: 2
        java.lang.Object PRESENT
        java.util.HashMap map
    Methods: 3
        boolean java.util.HashSet.contains(java.lang.Object) - Instructions: 3
            LINE 182: (boolean java.util.HashSet.contains(java.lang.Object):1) v4 = this.map
            LINE 182: (boolean java.util.HashSet.contains(java.lang.Object):5) v6 = v4.containsKey(p1)
            LINE 182: (boolean java.util.HashSet.contains(java.lang.Object):8) return v6
        void java.util.HashSet.<init>(java.util.Collection) - Instructions: 12
            LINE 98: (void java.util.HashSet.<init>(java.util.Collection):1) this.<init>()
            LINE 99: (void java.util.HashSet.<init>(java.util.Collection):5) v5 = new java.util.HashMap
            LINE 99: (void java.util.HashSet.<init>(java.util.Collection):10) v7 = p1.size()
            LINE 99: (void java.util.HashSet.<init>(java.util.Collection):15) v8 = CONVERT I to F v7
            LINE 99: (void java.util.HashSet.<init>(java.util.Collection):18) v10 = v8 / #(0.75 f)
            LINE 99: (void java.util.HashSet.<init>(java.util.Collection):19) v11 = CONVERT F to I v10
            LINE 99: (void java.util.HashSet.<init>(java.util.Collection):21) v13 = v11 + #(1)
            LINE 99: (void java.util.HashSet.<init>(java.util.Collection):24) v16 = max(v13, #(16))
            LINE 99: (void java.util.HashSet.<init>(java.util.Collection):27) v5.<init>(v16)
            LINE 99: (void java.util.HashSet.<init>(java.util.Collection):30) this.map = v5
            LINE 100: (void java.util.HashSet.<init>(java.util.Collection):35) v19 = this.addAll(p1)
            LINE 101: (void java.util.HashSet.<init>(java.util.Collection):39) return
        boolean java.util.HashSet.add(java.lang.Object) - Instructions: 6
            LINE 194: (boolean java.util.HashSet.add(java.lang.Object):1) v4 = this.map
            LINE 194: (boolean java.util.HashSet.add(java.lang.Object):5) v5 = java.util.HashSet.PRESENT
            LINE 194: (boolean java.util.HashSet.add(java.lang.Object):8) v7 = v4.put(p1, v5)
            LINE 194: (boolean java.util.HashSet.add(java.lang.Object):11) if (v7 != #(null)) goto 17
            LINE 194: (boolean java.util.HashSet.add(java.lang.Object):15) return #(1)
            LINE 194: (boolean java.util.HashSet.add(java.lang.Object):17) return #(0)
java.util.Arrays
    Attributes: 0
    Methods: 1
        java.util.List java.util.Arrays.asList(java.lang.Object[]) - Instructions: 3
            LINE 2341: (java.util.List java.util.Arrays.asList(java.lang.Object[]):0) v3 = new java.util.Arrays$ArrayList
            LINE 2341: (java.util.List java.util.Arrays.asList(java.lang.Object[]):5) v3.<init>(p1)
            LINE 2341: (java.util.List java.util.Arrays.asList(java.lang.Object[]):8) return v3
java.util.ConcurrentModificationException
    Attributes: 0
    Methods: 1
        void java.util.ConcurrentModificationException.<init>() - Instructions: 2
            LINE 57: (void java.util.ConcurrentModificationException.<init>():1) this.<init>()
            LINE 58: (void java.util.ConcurrentModificationException.<init>():4) return
java.lang.String
    Attributes: 0
    Methods: 3
        java.lang.String[] java.lang.String.split(java.lang.String) - Instructions: 0
        void java.lang.String.<init>(char[], int, int) - Instructions: 0
        java.lang.String java.lang.String.replaceAll(java.lang.String, java.lang.String) - Instructions: 0
java.lang.IllegalArgumentException
    Attributes: 0
    Methods: 0
java.util.NoSuchElementException
    Attributes: 0
    Methods: 1
        void java.util.NoSuchElementException.<init>() - Instructions: 2
            LINE 28: (void java.util.NoSuchElementException.<init>():1) this.<init>()
            LINE 29: (void java.util.NoSuchElementException.<init>():4) return
java.util.HashMap$Entry[]
    Attributes: 0
    Methods: 0
java.util.Arrays$ArrayList
    Attributes: 1
        java.lang.Object[] a
    Methods: 3
        void java.util.Arrays$ArrayList.<init>(java.lang.Object[]) - Instructions: 7
            LINE 2353: (void java.util.Arrays$ArrayList.<init>(java.lang.Object[]):1) this.<init>()
            LINE 2354: (void java.util.Arrays$ArrayList.<init>(java.lang.Object[]):5) if (p1 != #(null)) goto 18
            LINE 2355: (void java.util.Arrays$ArrayList.<init>(java.lang.Object[]):8) v6 = new java.lang.NullPointerException
            LINE 2355: (void java.util.Arrays$ArrayList.<init>(java.lang.Object[]):12) v6.<init>()
            LINE 2355: (void java.util.Arrays$ArrayList.<init>(java.lang.Object[]):15) throw v6
            LINE 2356: (void java.util.Arrays$ArrayList.<init>(java.lang.Object[]):18) this.a = p1
            LINE 2357: (void java.util.Arrays$ArrayList.<init>(java.lang.Object[]):21) return
        java.lang.Object java.util.Arrays$ArrayList.get(int) - Instructions: 3
            LINE 2368: (java.lang.Object java.util.Arrays$ArrayList.get(int):1) v4 = this.a
            LINE 2368: (java.lang.Object java.util.Arrays$ArrayList.get(int):5) v5 = v4[p1]
            LINE 2368: (java.lang.Object java.util.Arrays$ArrayList.get(int):6) return v5
        int java.util.Arrays$ArrayList.size() - Instructions: 3
            LINE 2360: (int java.util.Arrays$ArrayList.size():1) v3 = this.a
            LINE 2360: (int java.util.Arrays$ArrayList.size():4) v4 = v3.length
            LINE 2360: (int java.util.Arrays$ArrayList.size():5) return v4
java.util.AbstractMap
    Attributes: 2
        java.util.Set keySet
        java.util.Collection values
    Methods: 1
        void java.util.AbstractMap.<init>() - Instructions: 4
            LINE 53: (void java.util.AbstractMap.<init>():1) this.<init>()
            LINE 345: (void java.util.AbstractMap.<init>():6) this.keySet = #(null)
            LINE 346: (void java.util.AbstractMap.<init>():11) this.values = #(null)
            LINE 54: (void java.util.AbstractMap.<init>():14) return
java.lang.Exception
    Attributes: 0
    Methods: 1
        void java.lang.Exception.<init>() - Instructions: 0
java.util.AbstractSet
    Attributes: 0
    Methods: 1
        void java.util.AbstractSet.<init>() - Instructions: 2
            LINE 44: (void java.util.AbstractSet.<init>():1) this.<init>()
            LINE 45: (void java.util.AbstractSet.<init>():4) return
java.lang.Math
    Attributes: 0
    Methods: 1
        int java.lang.Math.max(int, int) - Instructions: 3
            LINE 783: (int java.lang.Math.max(int, int):2) if (p1 < p2) goto 10
            LINE 783: (int java.lang.Math.max(int, int):6) goto 10
            LINE 783: (int java.lang.Math.max(int, int):10) return v4
java.lang.NullPointerException
    Attributes: 0
    Methods: 0
java.util.HashMap$Entry
    Attributes: 4
        int hash
        java.lang.Object value
        java.lang.Object key
        java.util.HashMap$Entry next
    Methods: 1
        void java.util.HashMap$Entry.<init>(int, java.lang.Object, java.lang.Object, java.util.HashMap$Entry) - Instructions: 6
            LINE 727: (void java.util.HashMap$Entry.<init>(int, java.lang.Object, java.lang.Object, java.util.HashMap$Entry):1) this.<init>()
            LINE 728: (void java.util.HashMap$Entry.<init>(int, java.lang.Object, java.lang.Object, java.util.HashMap$Entry):6) this.value = p3
            LINE 729: (void java.util.HashMap$Entry.<init>(int, java.lang.Object, java.lang.Object, java.util.HashMap$Entry):12) this.next = p4
            LINE 730: (void java.util.HashMap$Entry.<init>(int, java.lang.Object, java.lang.Object, java.util.HashMap$Entry):17) this.key = p2
            LINE 731: (void java.util.HashMap$Entry.<init>(int, java.lang.Object, java.lang.Object, java.util.HashMap$Entry):22) this.hash = p1
            LINE 732: (void java.util.HashMap$Entry.<init>(int, java.lang.Object, java.lang.Object, java.util.HashMap$Entry):25) return
char[]
    Attributes: 0
    Methods: 0
main.Main
    Attributes: 1
        java.util.List weaselWordsList
    Methods: 5
        java.lang.String main.Main.removeDuplicateWords(java.lang.String) - Instructions: 9
            LINE 52: (java.lang.String main.Main.removeDuplicateWords(java.lang.String):0) v4 = new java.util.HashSet
            LINE 52: (java.lang.String main.Main.removeDuplicateWords(java.lang.String):7) v7 = p1.split(#(\s+))
            LINE 52: (java.lang.String main.Main.removeDuplicateWords(java.lang.String):10) v9 = asList(v7)
            LINE 52: (java.lang.String main.Main.removeDuplicateWords(java.lang.String):13) v4.<init>(v9)
            LINE 53: (java.lang.String main.Main.removeDuplicateWords(java.lang.String):18) v12 = v4.stream()
            LINE 53: (java.lang.String main.Main.removeDuplicateWords(java.lang.String):25) v15 = joining(#( ))
            LINE 53: (java.lang.String main.Main.removeDuplicateWords(java.lang.String):28) v17 = v12.collect(v15)
            LINE 53: (java.lang.String main.Main.removeDuplicateWords(java.lang.String):33) v18 = CHECKCAST v17
            LINE 53: (java.lang.String main.Main.removeDuplicateWords(java.lang.String):36) return v18
        boolean main.Main.hasWeaselWords(java.lang.String) - Instructions: 13
            LINE 35: (boolean main.Main.hasWeaselWords(java.lang.String):0) v4 = new java.util.HashSet
            LINE 35: (boolean main.Main.hasWeaselWords(java.lang.String):5) v5 = this.weaselWordsList
            LINE 35: (boolean main.Main.hasWeaselWords(java.lang.String):8) v4.<init>(v5)
            LINE 36: (boolean main.Main.hasWeaselWords(java.lang.String):15) v9 = p1.split(#(\s+))
            LINE 36: (boolean main.Main.hasWeaselWords(java.lang.String):20) v10 = v9.length
            LINE 36: (boolean main.Main.hasWeaselWords(java.lang.String):30) if (v17 >= v10) goto 59
            LINE 36: (boolean main.Main.hasWeaselWords(java.lang.String):36) v12 = v9[v17]
            LINE 37: (boolean main.Main.hasWeaselWords(java.lang.String):42) v14 = v4.contains(v12)
            LINE 37: (boolean main.Main.hasWeaselWords(java.lang.String):47) if (v14 == #(0)) goto 52
            LINE 38: (boolean main.Main.hasWeaselWords(java.lang.String):51) return #(1)
            LINE 36: (boolean main.Main.hasWeaselWords(java.lang.String):52) v16 = v17 + #(1)
            LINE 36: (boolean main.Main.hasWeaselWords(java.lang.String):55) goto 30
            LINE 41: (boolean main.Main.hasWeaselWords(java.lang.String):59) return #(0)
        void main.Main.<init>() - Instructions: 30
            LINE 8: (void main.Main.<init>():1) this.<init>()
            LINE 10: (void main.Main.<init>():7) v5 = new java.lang.String[]
            LINE 10: (void main.Main.<init>():14) v5[#(0)] = #(many)
            LINE 10: (void main.Main.<init>():19) v5[#(1)] = #(various)
            LINE 10: (void main.Main.<init>():24) v5[#(2)] = #(very)
            LINE 10: (void main.Main.<init>():29) v5[#(3)] = #(fairly)
            LINE 10: (void main.Main.<init>():34) v5[#(4)] = #(several)
            LINE 10: (void main.Main.<init>():39) v5[#(5)] = #(extremely)
            LINE 10: (void main.Main.<init>():45) v5[#(6)] = #(exceedingly)
            LINE 10: (void main.Main.<init>():51) v5[#(7)] = #(quite)
            LINE 10: (void main.Main.<init>():57) v5[#(8)] = #(remarkably)
            LINE 10: (void main.Main.<init>():63) v5[#(9)] = #(few)
            LINE 10: (void main.Main.<init>():69) v5[#(10)] = #(surprisingly)
            LINE 10: (void main.Main.<init>():75) v5[#(11)] = #(mostly)
            LINE 10: (void main.Main.<init>():81) v5[#(12)] = #(largely)
            LINE 10: (void main.Main.<init>():87) v5[#(13)] = #(huge)
            LINE 10: (void main.Main.<init>():93) v5[#(14)] = #(tiny)
            LINE 10: (void main.Main.<init>():99) v5[#(15)] = #(is a number)
            LINE 10: (void main.Main.<init>():105) v5[#(16)] = #(are a number)
            LINE 10: (void main.Main.<init>():111) v5[#(17)] = #(excellent)
            LINE 10: (void main.Main.<init>():117) v5[#(18)] = #(interestingly)
            LINE 10: (void main.Main.<init>():123) v5[#(19)] = #(significantly)
            LINE 10: (void main.Main.<init>():129) v5[#(20)] = #(substantially)
            LINE 10: (void main.Main.<init>():135) v5[#(21)] = #(clearly)
            LINE 10: (void main.Main.<init>():141) v5[#(22)] = #(vast)
            LINE 10: (void main.Main.<init>():147) v5[#(23)] = #(relatively)
            LINE 10: (void main.Main.<init>():153) v5[#(24)] = #(completely)
            LINE 10: (void main.Main.<init>():154) v57 = asList(v5)
            LINE 10: (void main.Main.<init>():157) this.weaselWordsList = v57
            LINE 10: (void main.Main.<init>():160) return
        void main.Main.main(java.lang.String[]) - Instructions: 8
            LINE 18: (void main.Main.main(java.lang.String[]):0) v3 = new main.Main
            LINE 18: (void main.Main.main(java.lang.String[]):4) v3.<init>()
            LINE 20: (void main.Main.main(java.lang.String[]):12) if (#(Your text with weasel...) == #(null)) goto 25
            LINE 20: (void main.Main.main(java.lang.String[]):17) v8 = v3.hasWeaselWords(#(Your text with weasel...))
            LINE 20: (void main.Main.main(java.lang.String[]):20) if (v8 == #(0)) goto 35
            LINE 21: (void main.Main.main(java.lang.String[]):25) v11 = v3.removeWeaselWords(#(Your text with weasel...))
            LINE 22: (void main.Main.main(java.lang.String[]):31) v13 = v3.removeDuplicateWords(#(Your text with weasel...))
            LINE 24: (void main.Main.main(java.lang.String[]):35) return
        java.lang.String main.Main.removeWeaselWords(java.lang.String) - Instructions: 15
            LINE 45: (java.lang.String main.Main.removeWeaselWords(java.lang.String):1) v4 = this.weaselWordsList
            LINE 45: (java.lang.String main.Main.removeWeaselWords(java.lang.String):4) v6 = v4.iterator()
            LINE 45: (java.lang.String main.Main.removeWeaselWords(java.lang.String):11) v8 = v6.hasNext()
            LINE 45: (java.lang.String main.Main.removeWeaselWords(java.lang.String):16) if (v8 == #(0)) goto 64
            LINE 45: (java.lang.String main.Main.removeWeaselWords(java.lang.String):20) v11 = v6.next()
            LINE 45: (java.lang.String main.Main.removeWeaselWords(java.lang.String):25) v12 = CHECKCAST v11
            LINE 46: (java.lang.String main.Main.removeWeaselWords(java.lang.String):30) v13 = new java.lang.StringBuilder
            LINE 46: (java.lang.String main.Main.removeWeaselWords(java.lang.String):34) v13.<init>()
            LINE 46: (java.lang.String main.Main.removeWeaselWords(java.lang.String):39) v17 = v13.append(#(\b))
            LINE 46: (java.lang.String main.Main.removeWeaselWords(java.lang.String):43) v19 = v17.append(v12)
            LINE 46: (java.lang.String main.Main.removeWeaselWords(java.lang.String):48) v21 = v19.append(#(\b))
            LINE 46: (java.lang.String main.Main.removeWeaselWords(java.lang.String):51) v23 = v21.toString()
            LINE 46: (java.lang.String main.Main.removeWeaselWords(java.lang.String):56) v26 = v27.replaceAll(v23, #())
            LINE 47: (java.lang.String main.Main.removeWeaselWords(java.lang.String):60) goto 11
            LINE 48: (java.lang.String main.Main.removeWeaselWords(java.lang.String):64) return v27
java.util.AbstractCollection
    Attributes: 0
    Methods: 2
        boolean java.util.AbstractCollection.addAll(java.util.Collection) - Instructions: 8
            LINE 316: (boolean java.util.AbstractCollection.addAll(java.util.Collection):3) v6 = p1.iterator()
            LINE 317: (boolean java.util.AbstractCollection.addAll(java.util.Collection):9) goto 28
            LINE 318: (boolean java.util.AbstractCollection.addAll(java.util.Collection):14) v10 = v6.next()
            LINE 318: (boolean java.util.AbstractCollection.addAll(java.util.Collection):19) v12 = this.add(v10)
            LINE 318: (boolean java.util.AbstractCollection.addAll(java.util.Collection):22) if (v12 == #(0)) goto 28
            LINE 317: (boolean java.util.AbstractCollection.addAll(java.util.Collection):28) v8 = v6.hasNext()
            LINE 317: (boolean java.util.AbstractCollection.addAll(java.util.Collection):33) if (v8 != #(0)) goto 14
            LINE 321: (boolean java.util.AbstractCollection.addAll(java.util.Collection):37) return v14
        void java.util.AbstractCollection.<init>() - Instructions: 2
            LINE 49: (void java.util.AbstractCollection.<init>():1) this.<init>()
            LINE 50: (void java.util.AbstractCollection.<init>():4) return
java.util.AbstractList$Itr
    Attributes: 4
        int cursor
        int expectedModCount
        int lastRet
        java.util.AbstractList this$0
    Methods: 5
        void java.util.AbstractList$Itr.<init>(java.util.AbstractList) - Instructions: 7
            LINE 413: (void java.util.AbstractList$Itr.<init>(java.util.AbstractList):21) v7 = p1.modCount
            LINE 413: (void java.util.AbstractList$Itr.<init>(java.util.AbstractList):24) this.expectedModCount = v7
            LINE 413: (void java.util.AbstractList$Itr.<init>(java.util.AbstractList):27) return
            LINE 395: (void java.util.AbstractList$Itr.<init>(java.util.AbstractList):2) this.this$0 = p1
            LINE 395: (void java.util.AbstractList$Itr.<init>(java.util.AbstractList):6) this.<init>()
            LINE 399: (void java.util.AbstractList$Itr.<init>(java.util.AbstractList):11) this.cursor = #(0)
            LINE 406: (void java.util.AbstractList$Itr.<init>(java.util.AbstractList):16) this.lastRet = #(-1)
        void java.util.AbstractList$Itr.checkForComodification() - Instructions: 8
            LINE 448: (void java.util.AbstractList$Itr.checkForComodification():1) v3 = this.this$0
            LINE 448: (void java.util.AbstractList$Itr.checkForComodification():4) v4 = v3.modCount
            LINE 448: (void java.util.AbstractList$Itr.checkForComodification():8) v5 = this.expectedModCount
            LINE 448: (void java.util.AbstractList$Itr.checkForComodification():11) if (v4 == v5) goto 22
            LINE 449: (void java.util.AbstractList$Itr.checkForComodification():14) v6 = new java.util.ConcurrentModificationException
            LINE 449: (void java.util.AbstractList$Itr.checkForComodification():18) v6.<init>()
            LINE 449: (void java.util.AbstractList$Itr.checkForComodification():21) throw v6
            LINE 450: (void java.util.AbstractList$Itr.checkForComodification():22) return
        java.lang.Object java.util.AbstractList$Itr.next() - Instructions: 14
            LINE 420: (java.lang.Object java.util.AbstractList$Itr.next():1) this.checkForComodification()
            LINE 422: (java.lang.Object java.util.AbstractList$Itr.next():5) v4 = this.this$0
            LINE 422: (java.lang.Object java.util.AbstractList$Itr.next():9) v5 = this.cursor
            LINE 422: (java.lang.Object java.util.AbstractList$Itr.next():12) v7 = v4.get(v5)
            LINE 423: (java.lang.Object java.util.AbstractList$Itr.next():19) v12 = this.cursor
            LINE 423: (java.lang.Object java.util.AbstractList$Itr.next():24) v14 = v12 + #(1)
            LINE 423: (java.lang.Object java.util.AbstractList$Itr.next():25) this.cursor = v14
            LINE 423: (java.lang.Object java.util.AbstractList$Itr.next():28) this.lastRet = v12
            LINE 424: (java.lang.Object java.util.AbstractList$Itr.next():32) return v7
            LINE 426: (java.lang.Object java.util.AbstractList$Itr.next():35) this.checkForComodification()
            LINE 427: (java.lang.Object java.util.AbstractList$Itr.next():38) v10 = new java.util.NoSuchElementException
            LINE 427: (java.lang.Object java.util.AbstractList$Itr.next():42) v10.<init>()
            LINE 427: (java.lang.Object java.util.AbstractList$Itr.next():45) throw v10
            LINE 420: (java.lang.Object java.util.AbstractList$Itr.next():0) v8 = catch <exc>
        boolean java.util.AbstractList$Itr.hasNext() - Instructions: 6
            LINE 416: (boolean java.util.AbstractList$Itr.hasNext():1) v3 = this.cursor
            LINE 416: (boolean java.util.AbstractList$Itr.hasNext():5) v4 = this.this$0
            LINE 416: (boolean java.util.AbstractList$Itr.hasNext():8) v6 = v4.size()
            LINE 416: (boolean java.util.AbstractList$Itr.hasNext():11) if (v3 == v6) goto 17
            LINE 416: (boolean java.util.AbstractList$Itr.hasNext():15) return #(1)
            LINE 416: (boolean java.util.AbstractList$Itr.hasNext():17) return #(0)
        void java.util.AbstractList$Itr.<init>(java.util.AbstractList, java.util.AbstractList$Itr, java.util.AbstractList$Itr) - Instructions: 2
            LINE 395: (void java.util.AbstractList$Itr.<init>(java.util.AbstractList, java.util.AbstractList$Itr, java.util.AbstractList$Itr):2) this.<init>(p1)
            LINE 395: (void java.util.AbstractList$Itr.<init>(java.util.AbstractList, java.util.AbstractList$Itr, java.util.AbstractList$Itr):5) return
java.util.AbstractList
    Attributes: 1
        int modCount
    Methods: 2
        java.util.Iterator java.util.AbstractList.iterator() - Instructions: 3
            LINE 337: (java.util.Iterator java.util.AbstractList.iterator():0) v3 = new java.util.AbstractList$Itr
            LINE 337: (java.util.Iterator java.util.AbstractList.iterator():7) v3.<init>(this, #(null), #(null))
            LINE 337: (java.util.Iterator java.util.AbstractList.iterator():10) return v3
        void java.util.AbstractList.<init>() - Instructions: 3
            LINE 61: (void java.util.AbstractList.<init>():1) this.<init>()
            LINE 692: (void java.util.AbstractList.<init>():6) this.modCount = #(0)
            LINE 62: (void java.util.AbstractList.<init>():9) return
com.ibm.wala.FakeRootClass
    Attributes: 0
    Methods: 1
        void com.ibm.wala.FakeRootClass.fakeRootMethod() - Instructions: 0
java.lang.RuntimeException
    Attributes: 0
    Methods: 1
        void java.lang.RuntimeException.<init>() - Instructions: 2
            LINE 32: (void java.lang.RuntimeException.<init>():1) this.<init>()
            LINE 33: (void java.lang.RuntimeException.<init>():4) return
java.lang.AbstractStringBuilder
    Attributes: 2
        char[] value
        int count
    Methods: 2
        java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(java.lang.String) - Instructions: 15
            LINE 388: (java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(java.lang.String):1) if (p1 != #(null)) goto 8
            LINE 389: (java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(java.lang.String):8) v8 = v6.length()
            LINE 390: (java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(java.lang.String):13) if (v8 != #(0)) goto 19
            LINE 390: (java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(java.lang.String):17) return this
            LINE 391: (java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(java.lang.String):19) v10 = this.count
            LINE 391: (java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(java.lang.String):23) v11 = v10 + v8
            LINE 392: (java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(java.lang.String):27) v12 = this.value
            LINE 392: (java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(java.lang.String):30) v13 = v12.length
            LINE 392: (java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(java.lang.String):31) if (v11 <= v13) goto 43
            LINE 393: (java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(java.lang.String):36) this.expandCapacity(v11)
            LINE 394: (java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(java.lang.String):43) v15 = this.value
            LINE 394: (java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(java.lang.String):47) v16 = this.count
            LINE 394: (java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(java.lang.String):50) v6.getChars(#(0), v8, v15, v16)
            LINE 395: (java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(java.lang.String):55) this.count = v11
            LINE 396: (java.lang.AbstractStringBuilder java.lang.AbstractStringBuilder.append(java.lang.String):59) return this
        void java.lang.AbstractStringBuilder.<init>(int) - Instructions: 4
            LINE 43: (void java.lang.AbstractStringBuilder.<init>(int):1) this.<init>()
            LINE 44: (void java.lang.AbstractStringBuilder.<init>(int):6) v5 = new []
            LINE 44: (void java.lang.AbstractStringBuilder.<init>(int):8) this.value = v5
            LINE 45: (void java.lang.AbstractStringBuilder.<init>(int):11) return
